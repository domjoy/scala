'Type Ascription' is just telling the compiler what type you expect out of an expression, from all possible valid types.
It is provided with the object after a colon followed by the type of choice. However, it should be an applicable type as per the Type Lattice.
scala> var x: Int = 1 + 1
x: Int = 2

scala> var y: Object = 1 + 1
<console>:8: error: type mismatch;
 found   : Int(1)
 required: ?{def +(x$1: ? >: Int(1)): ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method int2long in object Int of type (x: Int)Long
 and method int2float in object Int of type (x: Int)Float
 are possible conversion functions from Int(1) to ?{def +(x$1: ? >: Int(1)): ?}
       var y: Object = 1 + 1
                       ^
<console>:8: error: type mismatch;
 found   : Int(1)
 required: String
       var y: Object = 1 + 1
                           ^

scala> var z: Double = 1 + 1
z: Double = 2.0

scala> var s: String = "hello"
s: String = hello

scala> var s: Object = "hello"
s: Object = hello

But why and how would we ever want to use type ascriptions? -- watch and learn!
scala> val s = "Dave"
s: String = Dave

scala> val p = s: Object
p: Object = Dave

scala> val ss = scala.collection.mutable.Set(s)
ss: scala.collection.mutable.Set[String] = Set(Dave)

scala> val ps = scala.collection.mutable.Set(p)
ps: scala.collection.mutable.Set[Object] = Set(Dave)

You cannot add a Nil element to a Set of Strings
scala> ss += Nil
<console>:11: error: type mismatch;
 found   : scala.collection.immutable.Nil.type
 required: String
              ss += Nil
                    ^
However, if the Set is type ascribed as made of Objects, you sure can!
scala> ps += Nil
res28: ps.type = Set(List(), Dave)

Control flow
basic control like in other langs
scala allows us to use if else as an expression and not just as a statement.
below is combining control flow with evaluation - x is going to be x+1 or x-1 depending on the value of the condition
scala> if (true) x = x + 1 else x = x - 1

scala> x
res26: Int = 3

ask for the type of something
scala> :t 1
Int

scala> :t "hello"
String

scala> :t if (true) x + 1 else x - 1
Int

scala> :t if(true) 1 else 1.0
Double

Figure out where String sits on the Type Lattice
scala> :t if (true) "hello" else List(1,2,3)
java.io.Serializable

Type ascribing got to evaluate to a supported type on the type lattice hierarchy
scala> val s: String = if (true) "hello" else 1
<console>:8: error: type mismatch;
 found   : Int(1)
 required: String
       val s: String = if (true) "hello" else 1
                                              ^
                                              
Larger expressions fit with pipe - scala allows for it.
scala> var y = if (false) {
     |    x + 1
     |    } else {
     |      if (true) {
     |        x - 1
     |      } else {
     |        x - 2
     |    }
     |    }
y: Int = 2

scala> val z: Int = 1 + 1
z: Int = 2
notice z is declared as immutable, we can't reassign it

scala> z = z + 1
<console>:9: error: reassignment to val
       z = z + 1
         ^

Method is declared with keyword def
scala> def add(a: Int, b: Int): Int = a + b
add: (a: Int, b: Int)Int

scala> add(1,1)
res0: Int = 2

Use type inference to shorten a method
scala> def add(a,b) = a + b
<console>:1: error: ':' expected but ',' found.
       def add(a,b) = a + b
                ^
Parameters type descriptions are always required for methods
scala> def add(a: Int, b: Int) = a + b
add: (a: Int, b: Int)Int

Recursive method to compute Fibo nos.
scala> def fib(n: Int) = if (n == 1 || n == 2) 1 else  fib(n-1) + fib(n-2)
<console>:7: error: recursive method fib needs result type
       def fib(n: Int) = if (n == 1 || n == 2) 1 else  fib(n-1) + fib(n-2)
                                                       ^

scala>  def fib(n: Int): Int = if (n == 1 || n == 2) 1 else  fib(n-1) + fib(n-2) 
fib: (n: Int)Int

scala> fib(1)
res1: Int = 1

scala> fib(2)
res2: Int = 1

scala> fib(3)
res3: Int = 2

scala> fib(4)
res4: Int = 3

scala> fib(5)
res5: Int = 5

what is the type of 'println("hello")
scala> :t println("hello")
Unit
all method assignments are Unit, remember?

so how about in functions?
scala> def printHello() = println("hello")
printHello: ()Unit
looks like the method passes the Unit assignment to the function as well!

call it as a method
scala> printHello()
hello

call it as a variable
scala> printHello
hello

implies that we cud hv defined printHello in a simpler way still without any paranthesis
scala> def printHello = println("hello")
printHello: Unit

call it again as a method, will you?
scala> printHello()
<console>:9: error: Unit does not take parameters
              printHello()
                        ^
ah ha ... you can use function calls only as defined!

Empty paranthesis or empty block returns Unit
scala> :t ()
Unit

scala> :t {}
Unit

Variables do Eager evaluation, however methods always do lazy evaluation - this is known as Uniform Access Principle
scala> val x = 1
x: Int = 1

scala> def x = 1
x: Int

Let's explore pattern matching
Not a good use case of If else:
scala> def monthName(n: Int): String = 
     |     if(n == 1) {
     |        "January"
     |      } else if (n == 2){
     |        "February"
     |      } else {
     |        "Unknown"
     |      }
monthName: (n: Int)String

a good use case of Switch (or 'match' in scala):
scala> def monthname(n: Int): String = n match {
     | case 1 => "January"
     | case 2 => "February"
     | case _ => "Unknown"
     | }
monthname: (n: Int)String
defaults are set using the '_' wildcard ... its like a catch all

scala> monthname(1)
res13: String = January

scala> monthname(3)
res15: String = Unknown

scala> def daysInMonth(n: Int): Int = n match {
     |    case 1 | 3| 5 | 7 | 8 | 10 | 12 => 31
     |    case 4 | 6 | 9 | 11 => 30
     |    case 2 => 28
     |    }
daysInMonth: (n: Int)Int

scala> daysInMonth(12)
res16: Int = 31

Above we have seen constant patterns match (Int values). We can also use PM to extract properties of Objects
and combine smaller patterns 

scala> def whatIsIt(something: Any): String = something match {
     |    case 1 => "the number one"
     |    case "hello" => "a greeting"
     |    case List(_, _, _) => "a list of three values"
     |    case List(_, _) => "a list of two values"
     |    }
whatIsIt: (something: Any)String

scala> whatIsIt(1)
res13: String = the number one

scala> whatIsIt("hello")
res14: String = a greeting

scala> whatIsIt(List("hello","kitty"))
res15: String = a list of two values

scala> whatIsIt(List("hello","kitty","doggie"))
res16: String = a list of three values

scala> whatIsIt(List("hello", "goodbye", "scala", "foo"))
scala.MatchError: List(hello, goodbye, scala, foo) (of class scala.collection.immutable.$colon$colon)
  at .whatIsIt(<console>:7)
  ... 33 elided

Making it better...using 'Variable binding pattern' for matching
scala> def whatIsIt(something: Any): String = something match {
     |    case n: Int =>  "the number" + n
     |    case s: String => "the string" + s
     |    case _ => "something else"
     |    }
whatIsIt: (something: Any)String

scala> whatIsIt(1)
res18: String = the number1

scala> whatIsIt("hello")
res19: String = the stringhello

scala> whatIsIt("hello","kitty")
res20: String = something else

Making it even better...by 'Composition', we can perform operations on the matched pattern
scala> def whatIsIt(something: Any): String = something match {
     |     case List(a, b, c) => "a list of three elements: " + a + ", " + b + ", " + c
     |     case _ => "something else"
     |    }
whatIsIt: (something: Any)String

scala> whatIsIt(1)
res21: String = something else

scala> whatIsIt("hello")
res22: String = something else

scala> whatIsIt(List("hello","kitty","doggie"))
res23: String = a list of three elements: hello, kitty, doggie

Exception Handling with Patterns
Let's first observe some Exceptions...
scala> def dumb(n: Int) = n match {
     |    case 1 => "success!"
     |    }
dumb: (n: Int)String

scala> dumb(2)
scala.MatchError: 2 (of class java.lang.Integer)
  at .dumb(<console>:7)
  ... 33 elided

scala> "1".toInt
res25: Int = 1

scala> "not a number!!".toInt
java.lang.NumberFormatException: For input string: "not a number!!"
  at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
  at java.lang.Integer.parseInt(Integer.java:580)
  at java.lang.Integer.parseInt(Integer.java:615)
  at scala.collection.immutable.StringLike$class.toInt(StringLike.scala:272)
  at scala.collection.immutable.StringOps.toInt(StringOps.scala:30)
  ... 33 elided

With pattern matching, we can cleanly catch exceptions with try-catch.
scala> def parseInt(s: String): Int = 
	 |	  try {
     |    s.toInt
     |    } catch {
     |    case e: NumberFormatException => 0
     |    }
parseInt: (s: String)Int
'e' is an arbitrary variable of type NumberFormatException, and above is a variable binding pattern.
Notice the differnce in switch-match-case and try-catch-case.

scala> parseInt(1)
<console>:9: error: type mismatch;
 found   : Int(1)
 required: String
              parseInt(1)
                       ^

scala> parseInt("1")
res28: Int = 1

scala> parseInt("-1")
res29: Int = -1

scala> parseInt("hello")
res30: Int = 0

Making it better...
scala> scala> def parseInt(s: String): Int = try {
     | 
     |    s.toInt
     |     } catch {
     |    case e: NumberFormatException => 0
     |    case _ => 0
     |    }
<console>:12: warning: This catches all Throwables. If this is really intended, use `case _ : Throwable` to clear this warning.
          case _ => 0
               ^
parseInt: (s: String)Int

<console>:12: warning: This catches all Throwables. If this is really intended, use `case _ : Throwable` to clear this warning.
          case _ => 0
               ^
parseInt: (s: String)Int

scala> def parseInt(s: String): Int = 
     | try {
     | s.toInt
     | } catch {
     | case e: NumberFormatException => 0
     | case _: Throwable => 0
     | }
parseInt: (s: String)Int

scala> parseInt("1")
res0: Int = 1

scala> parseInt("hello")
res1: Int = 0

scala> parseInt(List("1"))
<console>:9: error: type mismatch;
 found   : List[String]
 required: String
              parseInt(List("1"))
                           ^

scala> parseInt("1.0")
res3: Int = 0

'Option[T]' in scala can have one of the two possible values: either Some[T] or None.
scala> Option("abc")
res9: Option[String] = Some(abc)

scala> Option(List("abc"))
res10: Option[List[String]] = Some(List(abc))

scala> Option(Map('k'->'v'))
res11: Option[scala.collection.immutable.Map[Char,Char]] = Some(Map(k -> v))

How can we use Option[T] for the same parseInt function to handle exceptions?
scala> def parseInt(s: String): Option[Int] = try {
     |     Some(s.toInt)
     |     } catch {
     |     case e: NumberFormatException => None
     |     }
parseInt: (s: String)Option[Int]

scala> parseInt("1")
res4: Option[Int] = Some(1)

scala> parseInt("2")
res5: Option[Int] = Some(2)

scala> parseInt("hello")
res6: Option[Int] = None