Assigning Block Expression
scala> val x = {val a =10; val b = 100; b -a}
x: Int = 90

Lazy Values
scala> val file = scala.io.Source.fromFile("readFile").mkString
java.io.FileNotFoundException: readFile (No such file or directory)
  at java.io.FileInputStream.open(Native Method)
  at java.io.FileInputStream.<init>(FileInputStream.java:138)
  at scala.io.Source$.fromFile(Source.scala:91)
  at scala.io.Source$.fromFile(Source.scala:76)
  at scala.io.Source$.fromFile(Source.scala:54)
  ... 33 elided

This is how we solve defining a file to be evaluated/loaded later
scala> lazy val file = scala.io.Source.fromFile("readFile").mkString
file: String = <lazy>

Control Structures
if - else
scala> var x = 5
x: Int = 5

scala> val s = if (x > 0 && x < 6) 1 else 0
s: Int = 1

scala> val s =if (x > 0 && x < 6) "positive" else 0
s: Any = positive

While loop
Scala does not understand special quotes
scala> var args= “500”
<console>:1: error: illegal character '\u201c'
       var args= “500”
                 ^
<console>:1: error: illegal character '\u201d'
       var args= “500”
                     ^

scala> var args = "500"
args: String = 500

scala> var i = 0
i: Int = 0

scala> while(i< args.length)
     | {
     | println(args(i))
     | i+= 1
     | }
5
0
0

Foreach Loop
scala> var args= "Hello"
args: String = Hello

understand that 'arg' used below is pretty much arbitrary placeholder for the element of 'args'.
scala> args.foreach(arg=> println(arg))
H
e
l
l
o

notice below how you don't have to provide the argument to println. since you're already working on each of 'args' elements, scala already knows what it has to do.
scala> args.foreach(println)
H
e
l
l
o

For loop
scala> val in = "Hello World"
in: String = Hello World

scala> var sum = 0
sum: Int = 0

scala> for (i<-0 until in.length) sum +=i

scala> print(sum)
55

Advanced For loop ... always evaluates left to right
scala> for(i<-1 to 3; j<-1 to 3) println(10*i+ j)
11
12
13
21
22
23
31
32
33

scala> for(i<-1 to 3; j<-1 to 3 if i==j) println(10*i+ j)
11
22
33

introducing variables in loop
scala> for(i<-1 to 3; x = 4-i; j<-x to 3) println(10*i+ j)
13
22
23
31
32
33

body with yield, returns collection of values
scala> val x = for(i<-1 to 20) yield i*2.5
x: scala.collection.immutable.IndexedSeq[Double] = Vector(2.5, 5.0, 7.5, 10.0, 12.5, 15.0, 17.5, 20.0, 22.5, 25.0, 27.5, 30.0, 32.5, 35.0, 37.5, 40.0, 42.5, 45.0, 47.5, 50.0)

scala> for (i<-x) println(i)
2.5
5.0
7.5
10.0
12.5
15.0
17.5
20.0
22.5
25.0
27.5
30.0
32.5
35.0
37.5
40.0
42.5
45.0
47.5
50.0

how about yield with strings?
scala>   val lst = List("A","B","C")
lst: List[String] = List(A, B, C)

Again, 'str' is arbitrary
scala>   val x = for (str <- lst) yield str+str
x: List[String] = List(AA, BB, CC)							

Another string example with yield															
scala> val p = "This is a test"										
p: String = This is a test											
																
scala> val x = for(str <- p.split("\\s+"); i = 2) yield str + i.toString	
x: Array[String] = Array(This2, is2, a2, test2)						

Functions - 3 ways of defining simple functions...always has an '= expression'.
block with one line and return type specified,
scala> def area(radius: Int): Double= {3.14 * radius * radius }
area: (radius: Int)Double

block with one line and no return type specified, but inferred per scala type lattice
scala> def area(radius: Int) = {3.14 * radius * radius }
area: (radius: Int)Double

no block, just straight expression
scala> def area(radius: Int) = 3.14 * radius * radius
area: (radius: Int)Double

Recursive functions...notice we can call the same function in its definition and scala accepts it!
scala> def factorial(n:Int):Int = if (n==0) 1 else n * factorial(n-1)
factorial: (n: Int)Int

Functions with arguments having default values...
scala> def concatStr(arg1:String, arg2:String = " World", arg3:String = " Scala") = arg1 + arg2 + arg3
concatStr: (arg1: String, arg2: String, arg3: String)String

scala> def concatStr(arg1:String = "Hello ", arg2:String, arg3:String = " Scala") = arg1 + arg2 + arg3
concatStr: (arg1: String, arg2: String, arg3: String)String

Calling functions - can re-arrange order of orguments if explicitly provided in the call. Also notice, that only for the first argument argument name may be skipped.
scala> concatStr("Hi", " Automobiles", arg2 = " Tesla")
<console>:9: error: parameter 'arg2' is already specified at parameter position 2
              concatStr("Hi", " Automobiles", arg2 = " Tesla")
                                                   ^

order of arguments switched properly
scala> concatStr("Hi", arg3 = " Automobiles", arg2 = " Tesla")
res9: String = Hi Tesla Automobiles

order maintained, so argument names may be skipped
scala> concatStr(arg1 = "Hi", " Tesla", arg3 = " Automobiles")
res11: String = Hi Tesla Automobiles

order switched and naming not provided properly
scala> concatStr(arg1 = "Hi", arg3 = " Automobiles", " Tesla")
<console>:9: error: positional after named argument.
      concatStr(arg1 = "Hi", arg3 = " Automobiles", " Tesla")
                                                    ^

however, if positionality of named arguments are changed, it doesn't work. notice arg1 and agr3 swapped.
scala> concatStr(arg3 = "Hi", " Tesla", arg1 = " Automobiles")
<console>:9: error: positional after named argument.
              concatStr(arg3 = "Hi", " Tesla", arg1 = " Automobiles")
                                     ^

but it works only for the case where the first unnamed argument is provided, even with switch in positionality of other arguments
scala> concatStr("Hi", arg3 = " Tesla", arg2 = " Automobiles")
Hi Automobiles Tesla

variable number of arguments is supported by scala, however defaults need to exist to make it work
scala> concatStr("Hi")
res13: String = Hi World Scala

only 3rd variable defined with default
scala> def concatStr(arg1:String, arg2:String, arg3:String = " Scala") = arg1 + arg2 + arg3
concatStr: (arg1: String, arg2: String, arg3: String)String

not gonna work anymore.
scala> concatStr("Hi")
<console>:9: error: not enough arguments for method concatStr: (arg1: String, arg2: String, arg3: String)String.
Unspecified value parameter arg2.
              concatStr("Hi")
                       ^

Procedures/Methods... multiple lines in a block within the function makes it a procedure.
Also notice no '= expression', and similarity to Java method.
Return type (or assignment) of a method is always Unit.
scala> def rect_area(length:Float, breadth:Float) {val area = length* breadth; print(area)}
rect_area: (length: Float, breadth: Float)Unit

--Collections--
Arrays...notice evaluation is immediate unless lazy
scala> val n = new Array[Int](10)
n: Array[Int] = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

scala> lazy val s = new Array[String](10)
s: Array[String] = <lazy>

try with no size
scala> val s = new Array[String]()
<console>:8: error: not enough arguments for constructor Array: (_length: Int)Array[String].
Unspecified value parameter _length.
       val s = new Array[String]()
               ^

scala> val s = new Array[String](10)
s: Array[String] = Array(null, null, null, null, null, null, null, null, null, null)

Notice the difference in above and below Array definitions (for use in known and unknown length arrays)
scala> val st = Array("Hello", "World")
st: Array[String] = Array(Hello, World)

scala> Array(1,2,3,4).sum
res19: Int = 10

scala> Array(1,5,9,8).max
res20: Int = 9

scala> val a = Array(1,7,2,9)
a: Array[Int] = Array(1, 7, 2, 9)

scala> scala.util.Sorting.quickSort(a)

scala> a.mkString("**")
res22: String = 1**2**7**9

ArrayBuffer...for mutability
scala> import scala.collection.mutable.ArrayBuffer
import scala.collection.mutable.ArrayBuffer

notice ArrayBuffer doesn't need the size as Array needed in the definition
scala> val a = ArrayBuffer[Int]()
a: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer()

Notice how easy it is to manipulate ArrayBuffer...very useful in scala
Adding one element at a time...using +
scala> a +=1
res0: a.type = ArrayBuffer(1)
recollect what returns <object>.type? ... Singleton or companion objects of a class.

Adding multiple elements at a time...using + with paranthesis
scala> a+= (2,3,5)
res1: a.type = ArrayBuffer(1, 2, 3, 5)

Adding multiple elements at a time...using ++ with another Array - also considered appending two arrays		
scala> a++=Array(6,7,8)
res2: a.type = ArrayBuffer(1, 2, 3, 5, 6, 7, 8)

trimming elements from the end (right)
scala> a.trimEnd(2)

scala> for (x <-a) println(x)
1
2
3
5
6

inserting element at a position
ArrayBuffer positions start with zero. Other elements are shifted a position towards the end (right).
scala> a.insert(2,9)

scala> for (x <-a) println(x)
1
2
9
3
5
6

inserting multiple elements at a position. Other elements are shifted those many positions toward the end (right).
scala> a.insert(2,10,11,12)

scala> for (x <-a) println(x)
1
2
10
11
12
9
3
5
6

removing a number of elements starting from a given position.
Notice seond argument is number of elements, not the value of the element to be removed - obviously!
scala> a.remove(2,3)

scala> for (x <-a) println(x)
1
2
9
3
5
6

Another ArrayBuffer example:
scala> val a = new ArrayBuffer[Int]()
a: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer()

Why this errored out?
scala> a.insert(1,2,3,4,5,6,7,8,9,0)
java.lang.IndexOutOfBoundsException: 1
  at scala.collection.mutable.ArrayBuffer.insertAll(ArrayBuffer.scala:139)
  at scala.collection.mutable.BufferLike$class.insert(BufferLike.scala:167)
  at scala.collection.mutable.AbstractBuffer.insert(Buffer.scala:49)
  ... 33 elided
remember - above insert will work only after the ArrayBuffer has been initialized  with one entry, as you are trying to insert 2 thru 0 at position 1.

if intent was to add elements, you do the following instead:		
scala> a += (1,2,3,4,5,6,7,8,9,0)
res19: a.type = ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)

yield with ArrayBuffers
scala> for (lambda <- a; if lambda %2 == 0) yield lambda * 2
res20: scala.collection.mutable.ArrayBuffer[Int] = ArrayBuffer(4, 8, 12, 16, 0)

Maps
by default a Map is immutable
scala> val mapping = Map("Vishal"-> "Kumar", "Vijay"-> "Verma")
mapping: scala.collection.immutable.Map[String,String] = Map(Vishal -> Kumar, Vijay -> Verma)
notice the direction of the arrow in map pairs. how does it compare to <- ?

you'll generally use a mutable map
scala> val mapping = scala.collection.mutable.Map("Vishal"-> "K", "Vijay"-> "V")
mapping: scala.collection.mutable.Map[String,String] = Map(Vishal -> K, Vijay -> V)

Accessing Maps
scala> val x = mapping("Vishal")
x: String = K

scala> val x = mapping.getOrElse("Vish", 0)
x: Any = 0

removing a pair in a Map
scala> mapping -= "Vishal"
res17: mapping.type = Map(Vijay -> V)

adding a pair in a Map
scala> mapping += ("Ajay"-> "Sharma")
res18: mapping.type = Map(Ajay -> Sharma, Vijay -> V)

Another way of adding a pair to a map
scala> val a = scala.collection.mutable.Map("a" ->1, "b" ->1)
a: scala.collection.mutable.Map[String,Int] = Map(b -> 1, a -> 1)

scala> a("c") = 2

scala> a
res12: scala.collection.mutable.Map[String,Int] = Map(b -> 1, a -> 1, c -> 2)

maps can be of any combination of key and value types. Even different combinations possible.
Notice one value is String, the other is char, so type inference on the Map shows the 'Any'.
scala> val mapping2 = Map("Vishal"-> "Kumar", "Vijay"-> 's')
mapping2: scala.collection.immutable.Map[String,Any] = Map(Vishal -> Kumar, Vijay -> s)

notice the Any return type since both String and char types we possible return types from this map.
scala> mapping2("Vishal")
res24: Any = Kumar

scala> mapping2("Vijay")
res25: Any = s

flipping the key pair of a map...
Notice the Type inference of he newly created map
scala> for((k,v) <- mapping2) yield (v,k)
res26: scala.collection.immutable.Map[Any,String] = Map(Kumar -> Vishal, s -> Vijay)

Tuples
scala> val a = (1, 4, "Bob", "Jack")
a: (Int, Int, String, String) = (1,4,Bob,Jack)

Two ways of accessing tuple's elements. Tuples elements position starts with One.
dot notation
scala> a._2
res0: Int = 4

space notation
scala> a _2
warning: there was one feature warning; re-run with -feature for details
res1: Int = 4

partition function returns a tuple where the elements are paritions
scala> "New Delhi India".partition(_.isUpper)
res2: (String, String) = (NDI,ew elhi ndia)

Lists
scala> val lst = List(1,2,3,4,5,6,7,8,9,0)
lst: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)

head returns first element
scala> lst.head
res7: Int = 1

tail returns the same list without the first element ... weird!
scala> lst.tail
res8: List[Int] = List(2, 3, 4, 5, 6, 7, 8, 9, 0)

appending an element to the beginning of a List
scala> 2 :: List(4,5)
res9: List[Int] = List(2, 4, 5)

doesn't work the otherway around
scala> List(6,7) :: 8
<console>:8: error: value :: is not a member of Int
              List(6,7) :: 8
                        ^

So what's the use of having a function like head and tail for Lists? ... to get the ability of recursing.
Recursion (rather than Iteration) is the preferred practice in Scala.
scala> def sum(l :List[Int]):Int= {if (l == Nil) 0 else l.head + sum(l.tail)}
sum: (l: List[Int])Int
l is an element of List[Int]

check out scala's 'Nil' above ... :)

remember what is in List lst?
scala> lst
res11: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)

let's see what happens when we pass it to the function above
scala> val y= sum(lst)
y: Int = 45

CONCLUSION: Do not underestimate the power of scala!
Read more about the other things scala can do.